name: 'Create Application Verion in Software Security Center'
description: 'Create Application Verion in Software Security Center'
author: 'Fortify'
outputs:
  SSC_APPVERSION_CREATE_STATUS:
    description: "Status of the AppVersion Creation"
    value: ${{ steps.create-appversion.outputs.SSC_APPVERSION_CREATE_STATUS }}
runs:
  using: composite
  steps:
    # TODO add feature to fcli
    # Define action options
    - id: define-options
      run: |
        if [ -z "$SSC_APPVERSION" ]; then
          echo "No Application Version provided (SSC_APPVERSION). Defaulting to Branch name: ${GITHUB_REPOSITORY#*/}:${GITHUB_REF_NAME}"
          SSC_APPVERSION=${GITHUB_REPOSITORY#*/}:${GITHUB_REF_NAME}
        fi
        
        SSC_APPVERSION=${SSC_APPVERSION} >> $GITHUB_OUTPUT
      shell: bash

    # Setup required CLIs
    - uses: fortify-ps/github-action/setup@main
      with:
        export-path: false
        fcli: action-default

    # Login to SSC
    - uses: fortify-ps/github-action/internal/ssc-login@main

    - shell: bash
      id: create-appversion
      run: |
        get_appversion_id () {
          echo $($FCLI_CMD ssc appversion list --query="application.name=='$1'&&name=='$2'" --output="expr={id}")
        }
        SSC_APPVERSION=${{ steps.define-options.outputs.SSC_APPVERSION }}
        if [[ "$SSC_APPVERSION" == *":"* ]]; then
          IFS=':'
          read -a strarr <<< "$SSC_APPVERSION"
          SSC_APP=${strarr[0]}
          SSC_VERSION=${strarr[1]}
        
          SSC_APPVERSION=$(get_appversion_id $SSC_APP  $SSC_VERSION)
        fi        
        
        if [[ -z "$SSC_APPVERSION_ID" ]]; then 
        ## AppVersion Creation
          echo "Creation of ${SSC_APP}:${SSC_VERSION}"
          SSC_APP_ID=$(${FCLI_CMD} ssc app list --query="name=='$SSC_APP'" --output="expr={id}")
          if [[ -z "$SSC_APP_ID" ]]; then
            PROJECT_BODY='{"name":"'${SSC_APP}'"}'
          else
            PROJECT_BODY='{"id":"'${SSC_APP_ID}'"}'
          fi
          echo '{"name":"'${SSC_VERSION}'","description":"","active":true,"committed":false,"project":'${PROJECT_BODY}'}'
          SSC_APPVERSION_ID=$(${FCLI_CMD} ssc rest call /api/v1/projectVersions --request=POST --output="expr={id}" \
          --data='{"name":"'${SSC_VERSION}'","description":"","active":true,"committed":false,"project":'${PROJECT_BODY}'}')
          if [[ ! -z "$SSC_APPVERSION_ID" ]]; then
            echo "AppVersion ${SSC_APP}:${SSC_VERSION} created uncommitted [$SSC_APPVERSION_ID]"
          else
            echo SSC_APPVERSION_CREATE_STATUS="FAILED" >> $GITHUB_OUTPUT;
            echo "AppVersion creation FAILED"; exit 1;
          fi
        
        ### Copy Attributes from Source Version   
          SSC_SOURCE_APPVERSION_ID=$(get_appversion_id ${SSC_SOURCE_APP} ${SSC_SOURCE_VERSION})
          if [[ ! -z "$SSC_SOURCE_APPVERSION_ID" ]]; then
            RESPONSE=$(${FCLI_CMD} ssc rest call /api/v1/projectVersions/action/copyFromPartial --request=POST --output="expr={responseCode}" \
            --data='{"copyAnalysisProcessingRules":"true","copyBugTrackerConfiguration":"true","copyCustomTags":"true","previousProjectVersionId":"'$SSC_SOURCE_APPVERSION_ID'","projectVersionId":"'$SSC_APPVERSION_ID'"}' \
             )|| echo "Failure"
            if [[ "$RESPONSE" == "200" ]]; then
              echo "Copy State from ${SSC_SOURCE_APP}:${SSC_SOURCE_VERSION} [$SSC_SOURCE_APPVERSION_ID] to ${SSC_APP}:${SSC_VERSION} [$SSC_APPVERSION_ID] successful"
            else 
              echo "Copy State from ${SSC_SOURCE_APP}:${SSC_SOURCE_VERSION} [$SSC_SOURCE_APPVERSION_ID] to ${SSC_APP}:${SSC_VERSION} [$SSC_APPVERSION_ID] Skipped"
              RESPONSE=-1
            fi
          fi
        
        ### Setting AppVersion Attributes  
          if [[ ! -z "$SSC_APPVERSION_ATTRIBUTES" ]]; then
            while IFS= read -r line ; do
              if [[ ! -z "$line" ]]; then
                ATTR_OPTS="$ATTR_OPTS --attributes=\"$line\""
              fi
            done <<< "$SSC_APPVERSION_ATTRIBUTES"
            RESPONSE=$(eval ${FCLI_CMD} ssc appversion update $SSC_APPVERSION_ID "$ATTR_OPTS" -o expr="{__action__}")|| echo "Setting AppVersion Attributes Failure"
            if [[ "$RESPONSE" == "UPDATED" ]]; then
              echo "Setting Attributes to ${SSC_APP}:${SSC_VERSION} [$SSC_APPVERSION_ID] successful"
            else 
              echo "Setting Attributes to ${SSC_APP}:${SSC_VERSION} [$SSC_APPVERSION_ID] Skipped"
              RESPONSE=-1
            fi
          fi
        
        ### Setting AppVersion Issue Template  
          if [[ ! -z "$SSC_APPVERSION_ISSUE_TEMPLATES" ]]; then
            RESPONSE=$(${FCLI_CMD} ssc appversion update $SSC_APPVERSION_ID --issue-template="$SSC_APPVERSION_ISSUE_TEMPLATES" -o expr="{__action__}")|| echo "Setting AppVersion Issue Template Failure"
            if [[ "$RESPONSE" == "UPDATED" ]]; then
              echo "Setting Issue Template to ${SSC_APP}:${SSC_VERSION} [$SSC_APPVERSION_ID] successful"
            else 
              echo "Setting Issue Template to ${SSC_APP}:${SSC_VERSION} [$SSC_APPVERSION_ID] Skipped"
              echo $RESPONSE
              RESPONSE=-1
            fi
          fi
        
        ### AppVersion commit
          COMMIT_APPVERSION_ID=$(${FCLI_CMD} ssc rest call /api/v1/projectVersions/${SSC_APPVERSION_ID} --request=PUT --output="expr={id}" --data='{"committed":"true"}')
          if [[ -z "$COMMIT_APPVERSION_ID" ]]; then
            echo "AppVersion commit failed. Trying to delete the uncommited version."
            RESPONSE_CODE=$(${FCLI_CMD} ssc rest call /api/v1/projectVersions/${SSC_APPVERSION_ID} --request=DELETE --output="expr={responseCode}")
            echo SSC_APPVERSION_CREATE_STATUS="FAILED" >> $GITHUB_OUTPUT;
            if [[ "$RESPONSE_CODE" == "200" ]]; then
              echo "Uncommited AppVersion ${SSC_APP}:${SSC_VERSION} [$SSC_APPVERSION_ID] deleted"
            else 
              echo "Uncommited AppVersion ${SSC_APP}:${SSC_VERSION} [$SSC_APPVERSION_ID] not deleted"
            fi
            exit 1
          else 
            echo "AppVersion ${SSC_APP}:${SSC_VERSION} [$SSC_APPVERSION_ID] successfully commited and created"
            echo SSC_APPVERSION_CREATE_STATUS="CREATED" >> $GITHUB_OUTPUT;
          fi
      
        ## AppVersion exists
        else
          echo "AppVersion ${SSC_APP}:${SSC_VERSION} already exists [$SSC_APPVERSION_ID]"
          echo SSC_APPVERSION_CREATE_STATUS="EXISTS" >> $GITHUB_OUTPUT;
        fi
       
        # Set AppVersion ID in env variables  
        echo "SSC_APPVERSION_ID=$SSC_APPVERSION_ID" >> $GITHUB_ENV;

    - name: copy-vulns
      if: ${{ env.SSC_CREATE_AND_COPY_VULNS && steps.create-appversion.outputs.SSC_APPVERSION_CREATE_STATUS == 'CREATED' }}
      uses: fortify-ps/github-action/ssc-copy-vulns@main

    - name: copy-audit
      if: ${{ env.SSC_CREATE_AND_COPY_AUDIT && steps.create-appversion.outputs.SSC_APPVERSION_CREATE_STATUS == 'CREATED' }}
      uses: fortify-ps/github-action/ssc-copy-audit@main




branding:
  icon: 'shield'
  color: 'blue'