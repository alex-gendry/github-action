name: 'Software Security Center: Copy Audit information from one application version to another'
description: 'Copy Audit information from one application version to another'
author: 'Fortify'
runs:
  using: composite
  steps:

    # Setup required CLIs
    - uses: fortify-ps/github-action/setup@main
      with:
        export-path: false
        fcli: action-default

    # Login to SSC
    - uses: fortify-ps/github-action/internal/ssc-login@main
      
    # Define action options
    - id: define-options
      run: |
        get_appversion_id () {
          echo $($FCLI_CMD ssc appversion list --query="application.name=='$1'&&name=='$2'" --output="expr={id}")
        }
      
        if [ -z "$SSC_URL" ]; then
          echo "ERROR: SSC_URL environment variable must be set"; exit 1;
        fi
        
        if [[ -z "$SSC_VERSION" && -z "$SSC_APPVERSION_ID" ]]; then
          echo "No Version Name (SSC_VERSION) or Version Id (SSC_APPVERSION_ID) provided. Defaulting to Branch name: ${GITHUB_REF_NAME}"
          SSC_VERSION=${GITHUB_REF_NAME}
        fi
        
        if [ -n "$SSC_VERSION" ]; then
          if [ -z "$SSC_APP" ]; then
            echo "No Application Name provided (SSC_APP). Defaulting to Repository name ${GITHUB_REPOSITORY#*/}";
            SSC_APP=${GITHUB_REPOSITORY#*/}
          fi
        
          SSC_APPVERSION_ID=$(get_appversion_id $SSC_APP  $SSC_VERSION)
          if [[ -z "$SSC_APPVERSION_ID" ]]; then echo Error: Failed to get Id for "$SSC_APP":"$SSC_VERSION"; exit 1; fi
        
          echo Copying to "$SSC_APP":"$SSC_VERSION" [$SSC_APPVERSION_ID]
        elif [[ -n "$SSC_APPVERSION_ID" ]]; then
          echo Copying to AppVersion with id $SSC_APPVERSION_ID
        fi
        
        echo "SSC_TARGET_APPVERSION_ID=$SSC_APPVERSION_ID" >> $GITHUB_OUTPUT;
        
        if [[ -n "$SSC_SOURCE_VERSION" ]]; then
            if [[ -z "$SSC_SOURCE_APP" ]]; then
              echo "Source Version provided without Source Application. Defaulting to Target Application $SSC_APP";
              SSC_SOURCE_APP=${SSC_APP}
            fi
            SSC_COPY_APPVERSION_ID=$(get_appversion_id $SSC_SOURCE_APP  $SSC_SOURCE_VERSION)
            if [[ -z "$SSC_COPY_APPVERSION_ID" ]]; then echo Error: Failed to get Id for "$SSC_SOURCE_APP":"$SSC_SOURCE_VERSION"; exit 1; fi
            echo Copying from "$SSC_SOURCE_APP":"$SSC_SOURCE_VERSION" with Id $SSC_COPY_APPVERSION_ID
        elif [[ !  -z "$SSC_SOURCE_VERSION_ID" ]]; then
          echo Copying from AppVersion with id $SSC_APPVERSION_ID
        else
          echo "ERROR: SSC_SOURCE_VERSION or SSC_SOURCE_VERSION_ID environment variable must be set"; exit 1;
        fi
        echo "SSC_COPY_APPVERSION_ID=$SSC_COPY_APPVERSION_ID" >> $GITHUB_OUTPUT;
      shell: bash

    # Copy audit
    - uses: alex-gendry/github-action/internal/ssc-run-copy-audit@feat/ssc-copy-audit
      id: ssc-copy-audit
      with:
        ssc_base_url: ${{ steps.define-options.outputs.SSC_URL }}
        ssc_copy_appversion_id: ${{ steps.define-options.outputs.SSC_COPY_APPVERSION_ID }}
        ssc_target_appversion_id: ${{ steps.define-options.outputs.SSC_TARGET_APPVERSION_ID }}


branding:
  icon: 'shield'
  color: 'blue'

